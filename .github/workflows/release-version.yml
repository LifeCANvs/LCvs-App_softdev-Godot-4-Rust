name: "Release workflow"

on:
  push:
    branches:
      - '!**'
    tags:
      # To include pre-releases: 'v0.1.[0-9]+-?*'
      - 'v0.1.[0-9]+'

env:
  # Note: used for test and clippy, not for publish
  GDEXT_FEATURES: "--features godot/experimental-godot-api,godot/formatted,godot/serde"

  # Crates to publish -- important, this doesn't work when there are spaces in any of the paths!
  # Keep in sync with update-version.sh
  GDEXT_CRATES: >
    godot-bindings
    godot-codegen
    godot-ffi
    godot-cell
    godot-core
    godot-macros
    godot

defaults:
  run:
    shell: bash

jobs:
  validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # sed: https://unix.stackexchange.com/a/589584
      - name: "Interpret tag version"
        run: |
          version=$(echo "$GITHUB_REF" | sed -n "s#refs/tags/v\(.*\)#\1#p")
          [ -z "$version" ] && {
            printf "\n::error::Failed to parse '$GITHUB_REF'.\n"
            exit 2
          }
          
          echo "Published version: $version"
          echo "GDEXT_PUBLISHED_VERSION=$version" >> $GITHUB_ENV

      - name: "Verify that Cargo.toml versions match ${{ env.GDEXT_PUBLISHED_VERSION }}"
        run: |
          echo "Checking crate versions..."
          
          # Check if each Cargo.toml has that version
          IFS=' ' read -r -a publishedCrates <<< "$GDEXT_CRATES"
          for crate in "${publishedCrates[@]}"; do
            readVersion=$(grep -Po '^version = "\K[^"]*' "$crate/Cargo.toml")
            printf "* $crate -> $readVersion"
          
            if [[ "$readVersion" != "$GDEXT_PUBLISHED_VERSION" ]]; then
              printf "     ERROR\n"
              versionMismatch="1"
            else
              printf "\n"
            fi
          done
          
          if [[ -n "$versionMismatch" ]]; then
            printf "\n::error::At least one crate has a version mismatching the git tag.\n"
            exit 2
          else
            printf "\nAll versions OK.\n"
          fi

  # Keep all in sync with minimal-ci and full-ci.
  unit-test:
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - uses: actions/checkout@v4

      - name: "Install Rust (uncached)"
        run: rustup update stable

      - name: "Compile and run test"
        run: cargo test $GDEXT_FEATURES

  clippy:
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - uses: actions/checkout@v4

      - name: "Install Rust (uncached)"
        run: rustup update stable

      - name: "Check clippy"
        run: |
          cargo clippy --all-targets $GDEXT_FEATURES -- \
          -D clippy::suspicious \
          -D clippy::style \
          -D clippy::complexity \
          -D clippy::perf \
          -D clippy::dbg_macro \
          -D clippy::todo \
          -D clippy::unimplemented \
          -D warnings

  rustfmt:
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - uses: actions/checkout@v4

      - name: "Install Rust (uncached)"
        run: rustup update stable

      - name: "Check rustfmt"
        run: cargo fmt --all -- --check

      - name: "Run custom repo checks"
        run: |
          cargo run -p repo-tweak
          git diff --quiet --exit-code || {
            echo "::error::Godot versions out of sync; update with `cargo run -p repo-tweak`."
            echo "Differences:"
            echo "----------------------------------------------------"
            git diff
            echo "----------------------------------------------------"
            exit 1
          }

  publish:
    runs-on: ubuntu-latest
#    environment: 'Crates.io'
    needs:
      - unit-test
      - clippy
      - rustfmt
    steps:
      # Note: we cannot dry-run the publishing, since crates depend on each other, and dry-run will fail if they aren't yet on crates.io.
      # Sleep to leave crates.io and docs.rs some time to index the dependencies, before releasing dependents.
      - uses: actions/checkout@v4

      - name: "Install Rust (uncached)"
        run: rustup update stable

      - name: "Execute crates.io publishing"
        # Note: uses CARGO_REGISTRY_TOKEN env secret.
        run: |
          IFS=' ' read -r -a publishedCrates <<< "$GDEXT_CRATES"
          for crate in "${publishedCrates[@]}"; do
            echo "Publish $crate..."
            (cd "$crate" && cargo publish --dry-run) || {
              printf "\n::error::Failed to publish $crate\n"
              exit 2
            }
            echo "Wait..."
            #sleep 40s
          done
