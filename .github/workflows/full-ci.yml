# Copyright (c) godot-rust; Bromeon and contributors.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: Full CI
#
# Runs before merging. Rebases on master to make sure CI passes for latest integration, not only for the PR at the time of creation.

on:
  merge_group:
  push:


env:
  GDEXT_FEATURES: ''
  RETRY: ${{ github.workspace }}/.github/other/retry.sh

  # ASan options: https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
  # LSan options: https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
  # * report_objects: list individual leaked objects when running LeakSanitizer
  LSAN_OPTIONS: report_objects=1

  CARGO_DENY_VERSION: "0.15.1"
  CARGO_MACHETE_VERSION: "0.6.2"


defaults:
  run:
    shell: bash

# If a new commit is pushed before the old one's CI has completed (on the same branch), abort previous run
#concurrency:
#  group: ${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  # For complex matrix workflow, see https://stackoverflow.com/a/65434401
  godot-itest:
    name: godot-itest (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 24
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Naming: {os}[-{runtimeVersion}]-{apiVersion}
        # runtimeVersion = version of Godot binary; apiVersion = version of GDExtension API against which gdext is compiled.

        # Config overview (see job for details).
        #
        # Cross-platform:
        # - Base version:     Godot nightly, no custom
        # - Double precision: Godot nightly, custom (bindgen), double
        # - 4.2 compat:       Godot 4.2
        #
        # Linux-only:
        # - Full:             Godot nightly, full codegen
        # - Double + lazy:    Godot nightly, custom, double, lazy func tables
        # - Features + exp:   Godot nightly, custom, threads, serde, experimental API
        # - Memcheck nightly: Godot mem nightly, custom, sanitizer
        # - Memcheck 4.x:     Godot mem 4.0/4.1, sanitizer

        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          # macOS -- for the unintuitive naming, see https://github.com/actions/runner-images?tab=readme-ov-file#available-images

          - name: macos-x86
            os: macos-12
            artifact-name: macos-x86-nightly
            godot-binary: godot.macos.editor.dev.x86_64
            with-hot-reload: true

          - name: macos-double-x86
            os: macos-12
            artifact-name: macos-double-x86-nightly
            godot-binary: godot.macos.editor.dev.double.x86_64
            rust-extra-args: --features godot/api-custom,godot/double-precision

          - name: macos-x86-4.2
            os: macos-12
            artifact-name: macos-x86-4.2
            godot-binary: godot.macos.editor.dev.x86_64
    #            godot-prebuilt-patch: '4.2.x'

          - name: macos-arm
            os: macos-latest
            artifact-name: macos-arm-nightly
            godot-binary: godot.macos.editor.dev.arm64
            with-hot-reload: true

           # api-custom on macOS arm64 not working, due to clang linker issues.
#          - name: macos-double-arm
#            os: macos-latest
#            artifact-name: macos-double-arm-nightly
#            godot-binary: godot.macos.editor.dev.double.arm64
#            rust-extra-args: --features godot/api-custom,godot/double-precision

          - name: macos-arm-4.2
            os: macos-latest
            artifact-name: macos-arm-4.2
            godot-binary: godot.macos.editor.dev.arm64
    #            godot-prebuilt-patch: '4.2.x'

          # Windows

          - name: windows
            os: windows-latest
            artifact-name: windows-nightly
            godot-binary: godot.windows.editor.dev.x86_64.exe
            with-hot-reload: true

          - name: windows-double
            os: windows-latest
            artifact-name: windows-double-nightly
            godot-binary: godot.windows.editor.dev.double.x86_64.exe
            rust-extra-args: --features godot/api-custom,godot/double-precision

          - name: windows-4.2
            os: windows-latest
            artifact-name: windows-4.2
            godot-binary: godot.windows.editor.dev.x86_64.exe
            #godot-prebuilt-patch: '4.2.x'

#          - name: windows-4.1
#            os: windows-latest
#            artifact-name: windows-4.1
#            godot-binary: godot.windows.editor.dev.x86_64.exe
#            godot-prebuilt-patch: '4.1.3'

          # Linux

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.

          # Uses full+experimental codegen, so that compatibility breakage towards nightly is detected.
          # If the experimental part causes problems, consider using only godot/__codegen-full.
          - name: linux-full
            os: ubuntu-20.04
            artifact-name: linux-nightly
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            rust-extra-args: --features itest/codegen-full
            with-hot-reload: true

          # Combines now a lot of features, but should be OK. lazy-function-tables doesn't work with experimental-threads.
          - name: linux-double-lazy
            os: ubuntu-20.04
            artifact-name: linux-double-nightly
            godot-binary: godot.linuxbsd.editor.dev.double.x86_64
            rust-extra-args: --features godot/api-custom,godot/double-precision,itest/codegen-full,godot/lazy-function-tables

          - name: linux-features-experimental
            os: ubuntu-20.04
            artifact-name: linux-nightly
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            rust-extra-args: --features itest/experimental-threads,itest/codegen-full-experimental,godot/api-custom,godot/serde,itest/register-docs

          - name: linux-release
            os: ubuntu-20.04
            artifact-name: linux-release-nightly
            godot-binary: godot.linuxbsd.template_release.x86_64
            rust-extra-args: --release
            rust-cache-key: release

          # Linux compat (4.0 and 4.1 disabled, already covered by memcheck)

          - name: linux-4.2
            os: ubuntu-20.04
            artifact-name: linux-4.2
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            #godot-prebuilt-patch: '4.2.x'

#          - name: linux-4.1
#            os: ubuntu-20.04
#            artifact-name: linux-4.2
#            godot-binary: godot.linuxbsd.editor.dev.x86_64
#            godot-prebuilt-patch: '4.1.4'
#
#          - name: linux-4.0
#            os: ubuntu-20.04
#            artifact-name: linux-4.0
#            godot-binary: godot.linuxbsd.editor.dev.x86_64
#            godot-prebuilt-patch: '4.0.4'


          # Memory checks: special Godot binaries compiled with AddressSanitizer/LeakSanitizer to detect UB/leaks.
          # See also https://rustc-dev-guide.rust-lang.org/sanitizers.html.
          #
          # Additionally, the Godot source is patched to make dlclose() a no-op, as unloading dynamic libraries loses stacktrace and
          # cause false positives like println!. See https://github.com/google/sanitizers/issues/89.
          #
          # There is also a gcc variant besides clang, which is currently not used.
          - name: linux-memcheck-nightly
            os: ubuntu-20.04
            artifact-name: linux-memcheck-nightly
            godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
            rust-extra-args: --features godot/api-custom
            # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
            rust-target: x86_64-unknown-linux-gnu

          - name: linux-memcheck-4.1
            os: ubuntu-20.04
            artifact-name: linux-memcheck-4.1
            godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
            godot-prebuilt-patch: '4.1' # check compat of API 4.1.0 with newer binaries.
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
            # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
            rust-target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: "Run Godot integration test"
        uses: ./.github/composite/godot-itest
        with:
          artifact-name: godot-${{ matrix.artifact-name }}
          godot-binary: ${{ matrix.godot-binary }}
          godot-args: ${{ matrix.godot-args }} # currently unused
          godot-prebuilt-patch: ${{ matrix.godot-prebuilt-patch }}
          rust-extra-args: ${{ matrix.rust-extra-args }}
          rust-toolchain: ${{ matrix.rust-toolchain || 'stable' }}
          rust-env-rustflags: ${{ matrix.rust-env-rustflags }}
          rust-target: ${{ matrix.rust-target }}
          rust-cache-key: ${{ matrix.rust-cache-key }}
          with-llvm: ${{ contains(matrix.name, 'macos') && contains(matrix.rust-extra-args, 'api-custom') }}
          godot-check-header: ${{ matrix.godot-check-header }}
          
      - name: "Build and test hot-reload"
        if: ${{ matrix.with-hot-reload }}
        working-directory: examples/hot-reload/godot/test
        # Repeat a few times, our hot reload integration test can sometimes be a bit flaky.
        run: $RETRY ./run-test.sh
        shell: bash
